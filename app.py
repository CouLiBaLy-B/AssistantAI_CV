# app.py
import streamlit as st
from streamlit_pills import pills
from scr.utils import extract_text_from_pdf
from scr.models import (
    ResumeImprover,
    CoverLetterGenerator,
    ScoreResumeJob,
    ResumeGenerator,
    MailCompletion,
)

st.set_page_config(page_title="Job Assistance AI", page_icon="ü§ñ")
# D√©finir les styles CSS

css = """
<style>
    .title {
        font-size: 36px;
        font-weight: bold;
        color: #4c4c4c;
    }
    .subtitle {
        font-size: 24px;
        font-weight: bold;
        color: #6c6c6c;
    }
    .description {
        font-size: 18px;
        color: #8c8c8c;
    }
</style>
"""

# Appliquer les styles CSS
st.markdown(css, unsafe_allow_html=True)

# Utiliser les styles CSS dans votre application
st.markdown("<div class='title'>Job Assistance AI</div>", unsafe_allow_html=True)
st.markdown(
    "<div class='subtitle'>Am√©liorez votre processus de candidature</div>",
    unsafe_allow_html=True,
)
st.markdown(
    "<div class='description'>Cette application utilise des mod√®les d'IA pour vous aider √† scorer votre CV, r√©diger des lettres de motivation et am√©liorer votre CV.</div>",
    unsafe_allow_html=True,
)

tabMain, tabInfo, tabTo_dos = st.tabs(["Main", "Info", "To-do's"])

with tabMain:
    example = pills(
        "",
        ["CV et Offres", "Mails"],
        ["üçø", "üêé"],
        label_visibility="collapsed",
    )
    if example == "CV et Offres":
        task = st.radio(
            "Que vous voulez faire ?",
            options=(
                "Score de correspondance",
                "R√©daction de lettre de motivation",
                "Am√©lioration de CV",
            ),
            key="models",
        )

        resume_pdf = st.file_uploader("Import ton CV en pdf", type="pdf")

        job_advert = st.text_area("L'offre de poste",
                                  value="",
                                  height=400,
                                  key="offre")
        if resume_pdf is None:
            st.error("Veuillez importer votre CV avant de continuer.")
        elif job_advert == "":
            st.error("Veuillez saisir une description de poste avant de continuer.")
        else:
            try:
                if st.button("Lancer"):
                    with st.spinner("Wait for it..."):
                        resume = extract_text_from_pdf(resume_pdf)
                        if task == "Score de correspondance":
                            generator = ResumeGenerator(
                                resume=resume,
                                job_advert=job_advert,
                                resumeStrategy=ScoreResumeJob(),
                            )
                            generated = generator.generator()
                            st.markdown(
                                generated["text"],
                                unsafe_allow_html=True,
                            )
                        if task == "R√©daction de lettre de motivation":
                            generator = ResumeGenerator(
                                resume=resume,
                                job_advert=job_advert,
                                resumeStrategy=CoverLetterGenerator(),
                            )
                            generated = generator.generator()
                            st.write(generated["text"])
                        if task == "Am√©lioration de CV":
                            generator = ResumeGenerator(
                                resume=resume,
                                job_advert=job_advert,
                                resumeStrategy=ResumeImprover(),
                            )
                            generated = generator.generator()
                            st.markdown(
                                generated["text"], unsafe_allow_html=True
                            )  # st.write(generated["text"].split("R√©ponse :")[1])
                    st.success("Done!")
            except Exception as e:
                st.exception(f"Erreur {e}")
    if example == "Mails":
        resume_pdf = st.file_uploader(
            "Import ton CV en pdf", type="pdf", key="mail_resume"
        )
        if resume_pdf is not None:
            try:
                if st.button("Lancer", key="mail"):
                    with st.spinner("Wait for it..."):
                        resume = extract_text_from_pdf(resume_pdf)
                        generator = MailCompletion()
                        mail_complet = generator.mailcompletion(resume=resume)
                        st.write(mail_complet["text"].split("R√©ponse :")[1])
                    st.success("Done!")
            except Exception as e:
                st.write(f"Erreur {e}")

with tabInfo:
    st.markdown(
        "<div class='title'>√Ä propos de cette application</div>",
        unsafe_allow_html=True,
    )
    st.markdown(
        "<div class='description'>Cette application utilise le mod√®le d'IA MixTraL-8x7B-Instruct-v0.1, d√©velopp√© par MistralAI. Ce mod√®le a √©t√© entra√Æn√© sur une grande vari√©t√© de t√¢ches de traitement du langage naturel, y compris la r√©daction, l'analyse et la g√©n√©ration de texte.</div>",
        unsafe_allow_html=True,
    )

    st.markdown(
        "<div class='subtitle'>T√¢ches effectu√©es</div>",
        unsafe_allow_html=True
    )
    st.markdown(
        "- **Score de correspondance** : √âvaluer la correspondance entre votre CV et une offre d'emploi sp√©cifique en attribuant un score sur 100 et en identifiant les points forts et les points faibles.",
        unsafe_allow_html=True,
    )
    st.markdown(
        "- **R√©daction de lettre de motivation** : G√©n√©rer une lettre de motivation personnalis√©e en fonction de votre CV et de l'offre d'emploi.",
        unsafe_allow_html=True,
    )
    st.markdown(
        "- **Am√©lioration de CV** : Am√©liorer votre CV en int√©grant les comp√©tences, qualifications et exp√©riences pertinentes pour l'offre d'emploi vis√©e.",
        unsafe_allow_html=True,
    )

with tabTo_dos:
    st.markdown(
        "<div class='title'>Am√©liorations futures</div>", unsafe_allow_html=True
    )

    st.markdown("### Fonctionnalit√©s suppl√©mentaires")
    st.markdown(
        "- **Analyse des comp√©tences** : Ajouter une fonctionnalit√© pour analyser les comp√©tences du candidat √† partir de son CV et fournir des recommandations pour combler les lacunes par rapport √† l'offre d'emploi."
    )
    st.markdown(
        "- **Optimisation du CV pour les syst√®mes ATS** : Int√©grer une fonctionnalit√© pour optimiser le CV afin qu'il soit mieux reconnu par les syst√®mes de suivi des candidats (ATS) utilis√©s par les entreprises."
    )
    st.markdown(
        "- **Suggestions de postes pertinents** : D√©velopper une fonctionnalit√© pour recommander des offres d'emploi pertinentes en fonction du profil du candidat."
    )
    st.markdown(
        "- **Suivi des candidatures** : Ajouter une fonctionnalit√© permettant aux utilisateurs de suivre leurs candidatures et de recevoir des rappels pour les √©tapes suivantes."
    )

    st.markdown("### Am√©liorations de l'interface utilisateur")
    st.markdown(
        "- **Th√®me personnalisable** : Permettre aux utilisateurs de choisir un th√®me de couleurs personnalis√© pour l'application."
    )
    st.markdown(
        "- **Mode sombre** : Ajouter un mode sombre pour une meilleure exp√©rience dans des environnements faiblement √©clair√©s."
    )
    st.markdown(
        "- **Aide contextuelle** : Fournir des info-bulles et des guides pour aider les utilisateurs √† comprendre les diff√©rentes fonctionnalit√©s de l'application."
    )

    st.markdown("### Int√©grations suppl√©mentaires")
    st.markdown(
        "- **Int√©gration avec des services d'emploi** : Permettre aux utilisateurs de se connecter √† des services d'emploi populaires, comme LinkedIn ou Indeed, pour importer leurs informations de profil et postuler directement depuis l'application."
    )
    st.markdown(
        "- **Partage de CV** : Ajouter une fonctionnalit√© pour partager facilement le CV am√©lior√© avec des employeurs potentiels ou des r√©seaux professionnels."
    )

    st.markdown("### Am√©liorations de performance")
    st.markdown(
        "- **Mise en cache des r√©sultats** : Mettre en cache les r√©sultats g√©n√©r√©s par le mod√®le d'IA pour acc√©l√©rer les temps de r√©ponse lors de requ√™tes ult√©rieures similaires."
    )
    st.markdown(
        "- **Traitement parall√®le** : Explorer les possibilit√©s de traitement parall√®le pour acc√©l√©rer les temps de r√©ponse, en particulier pour les t√¢ches gourmandes en ressources."
    )

    st.markdown(
        "N'h√©sitez pas √† soumettre vos propres id√©es d'am√©liorations dans la section des commentaires ci-dessous."
    )
